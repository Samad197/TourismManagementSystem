@model TourismManagementSystem.Models.ViewModels.RegisterViewModel
@using System.Linq
@using System.Web.Mvc
@{
    ViewBag.Title = "Register";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Build a safe, public-facing role list (hide Admin)
    var rawRoles = (IEnumerable<dynamic>)(ViewBag.Roles ?? Enumerable.Empty<dynamic>());
    var roleItems = new List<SelectListItem>();

    foreach (var r in rawRoles)
    {
        string name = (string)r.RoleName;

        // ❗ Razor requires braces – no single-line if
        if (string.Equals(name, "Admin", System.StringComparison.OrdinalIgnoreCase))
        {
            continue;
        }

        string text = name;
        if (name == "Agency")
        {
            text = "Agency (Travel Agency)";
        }
        else if (name == "Guide")
        {
            text = "Guide (Tour Guide)";
        }
        else if (name == "Tourist")
        {
            text = "Tourist (Customer)";
        }

        roleItems.Add(new SelectListItem
        {
            Value = System.Convert.ToString(r.RoleId),
            Text = text
        });
    }

    // Default to Tourist if nothing is selected
    int selectedId = Model?.RoleId ?? 0;
    if (selectedId == 0)
    {
        var touristItem = roleItems.FirstOrDefault(i => i.Text.StartsWith("Tourist"));
        if (touristItem != null)
        {
            int parsed;
            if (int.TryParse(touristItem.Value, out parsed))
            {
                selectedId = parsed;
            }
        }
    }
}

<!-- Page Banner -->
<div class="container-fluid bg-breadcrumb">
    <div class="container text-center py-5" style="max-width: 900px;">
        <h3 class="text-white display-3 mb-4">Register</h3>
        <ol class="breadcrumb justify-content-center mb-0">
            <li class="breadcrumb-item"><a href="@Url.Action("Index","Home")">Home</a></li>
            <li class="breadcrumb-item active text-white">Register</li>
        </ol>
    </div>
</div>

<!-- Flash messages -->
@Html.Partial("_Flash")

<!-- Flash messages -->
@*<div class="container mt-4">
        @if (TempData["Success"] != null)
        {<div class="alert alert-success">@TempData["Success"]</div>}
        @if (TempData["Info"] != null)
        {<div class="alert alert-info">@TempData["Info"]</div>}
        @if (TempData["Error"] != null)
        {<div class="alert alert-danger">@TempData["Error"]</div>}
    </div>*@

<!-- Registration Form -->
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-6 bg-light p-5 rounded shadow">
            <h2 class="text-center mb-4">Create Your Account</h2>

            @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { autocomplete = "off" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger mb-3" })

                <div class="form-group mb-3">
                    @Html.LabelFor(m => m.FullName)
                    @Html.TextBoxFor(m => m.FullName, new { @class = "form-control", placeholder = "Enter full name", maxlength = "100", autofocus = "autofocus", required = "required" })
                    @Html.ValidationMessageFor(m => m.FullName, "", new { @class = "text-danger" })
                </div>

                <div class="form-group mb-3">
                    @Html.LabelFor(m => m.Email)
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Enter email", type = "email", autocomplete = "email", required = "required" })
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                </div>

                <div class="form-group mb-3">
                    @Html.LabelFor(m => m.Password)
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Enter password", autocomplete = "new-password", required = "required", minlength = "6" })
                    <span class="text-muted small">Minimum 6 characters</span>
                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                </div>

                <div class="form-group mb-3">
                    @Html.LabelFor(m => m.ConfirmPassword, "Confirm Password")
                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", placeholder = "Re-enter password", autocomplete = "new-password", required = "required", minlength = "6" })
                    @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
                </div>

                <div class="form-group mb-2">
                    @Html.LabelFor(m => m.RoleId, "Role")
                    @Html.DropDownListFor(
                        m => m.RoleId,
                        new SelectList(roleItems, "Value", "Text", selectedId),
                        "-- Select Role --",
                        new { @class = "form-control", id = "RoleId", required = "required" }
                    )
                    @Html.ValidationMessageFor(m => m.RoleId, "", new { @class = "text-danger" })
                </div>

                <!-- Dynamic role hint -->
                <div id="roleHint" class="alert py-2 px-3 small d-none mb-3"></div>

                <button type="submit" class="btn btn-primary w-100 py-2">Register</button>

                <div class="text-center mt-3">
                    <small>Already have an account? <a href="@Url.Action("Login","Account")">Login here</a></small>
                </div>
            }
        </div>
    </div>
</div>

@section scripts{
    <script>
        (function () {
            const sel = document.getElementById('RoleId');
            const hint = document.getElementById('roleHint');

            function updateHint() {
                if (!sel || !hint) return;
                const text = (sel.options[sel.selectedIndex] || {}).text || "";
                const isAgency = /(^|\s)Agency/i.test(text);
                const isGuide = /(^|\s)Guide/i.test(text);
                const isTourist = /^Tourist/i.test(text);

                if (isAgency || isGuide) {
                    hint.classList.remove('d-none', 'alert-success', 'alert-warning');
                    hint.classList.add('alert-info');
                    hint.innerHTML =
                        '<strong>Heads up:</strong> Agency and Guide accounts require <strong>Admin approval</strong> before you can publish tours or accept bookings. After registering, you\'ll be redirected to complete your profile.';
                } else if (isTourist) {
                    hint.classList.remove('d-none', 'alert-info', 'alert-warning');
                    hint.classList.add('alert-success');
                    hint.innerHTML =
                        '<strong>Good to go:</strong> Tourist accounts get <strong>instant access</strong> to browse and book tours.';
                } else {
                    hint.classList.add('d-none');
                    hint.innerHTML = "";
                }
            }

            sel && sel.addEventListener('change', updateHint);
            updateHint();
        })();
    </script>
}
